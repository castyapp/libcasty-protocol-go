// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// User Profile
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveActivity(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*Response, error)
	GetUser(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	Search(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Security
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*Response, error)
	GenerateRecoveryCodes(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*RecoveryCodesResponse, error)
	EnableTwoFactorAuth(ctx context.Context, in *TwoFactorAuthRequest, opts ...grpc.CallOption) (*Response, error)
	DisableTwoFactorAuth(ctx context.Context, in *TwoFactorAuthRequest, opts ...grpc.CallOption) (*Response, error)
	// FriendZone
	GetFriend(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*FriendResponse, error)
	GetPendingFriendRequests(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*PendingFriendRequests, error)
	GetFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Friend, error)
	SendFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Response, error)
	AcceptFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Response, error)
	GetFriends(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	GetOnlineFriends(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	// Connections
	GetConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error)
	GetConnections(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error)
	UpdateConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error)
	// Notifications
	GetNotifications(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	ReadAllNotifications(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	// User Devices
	CreateDevice(ctx context.Context, in *CreateUserDevice, opts ...grpc.CallOption) (*Response, error)
	GetDevices(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserDeviceResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdateActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveActivity(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/RemoveActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Search(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateRecoveryCodes(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*RecoveryCodesResponse, error) {
	out := new(RecoveryCodesResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GenerateRecoveryCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EnableTwoFactorAuth(ctx context.Context, in *TwoFactorAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/EnableTwoFactorAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DisableTwoFactorAuth(ctx context.Context, in *TwoFactorAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/DisableTwoFactorAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriend(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*FriendResponse, error) {
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPendingFriendRequests(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*PendingFriendRequests, error) {
	out := new(PendingFriendRequests)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetPendingFriendRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Friend, error) {
	out := new(Friend)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/SendFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcceptFriendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/AcceptFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriends(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOnlineFriends(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetOnlineFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
	out := new(ConnectionsResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetConnections(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
	out := new(ConnectionsResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
	out := new(ConnectionsResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNotifications(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadAllNotifications(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/ReadAllNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateDevice(ctx context.Context, in *CreateUserDevice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.UserService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDevices(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserDeviceResponse, error) {
	out := new(UserDeviceResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// User Profile
	UpdateState(context.Context, *UpdateStateRequest) (*Response, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*Response, error)
	RemoveActivity(context.Context, *AuthenticateRequest) (*Response, error)
	GetUser(context.Context, *AuthenticateRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*GetUserResponse, error)
	Search(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*AuthResponse, error)
	// Security
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*Response, error)
	GenerateRecoveryCodes(context.Context, *AuthenticateRequest) (*RecoveryCodesResponse, error)
	EnableTwoFactorAuth(context.Context, *TwoFactorAuthRequest) (*Response, error)
	DisableTwoFactorAuth(context.Context, *TwoFactorAuthRequest) (*Response, error)
	// FriendZone
	GetFriend(context.Context, *FriendRequest) (*FriendResponse, error)
	GetPendingFriendRequests(context.Context, *AuthenticateRequest) (*PendingFriendRequests, error)
	GetFriendRequest(context.Context, *FriendRequest) (*Friend, error)
	SendFriendRequest(context.Context, *FriendRequest) (*Response, error)
	AcceptFriendRequest(context.Context, *FriendRequest) (*Response, error)
	GetFriends(context.Context, *AuthenticateRequest) (*FriendsResponse, error)
	GetOnlineFriends(context.Context, *AuthenticateRequest) (*FriendsResponse, error)
	// Connections
	GetConnection(context.Context, *ConnectionRequest) (*ConnectionsResponse, error)
	GetConnections(context.Context, *AuthenticateRequest) (*ConnectionsResponse, error)
	UpdateConnection(context.Context, *ConnectionRequest) (*ConnectionsResponse, error)
	// Notifications
	GetNotifications(context.Context, *AuthenticateRequest) (*NotificationResponse, error)
	CreateNotification(context.Context, *CreateNotificationRequest) (*NotificationResponse, error)
	ReadAllNotifications(context.Context, *AuthenticateRequest) (*NotificationResponse, error)
	// User Devices
	CreateDevice(context.Context, *CreateUserDevice) (*Response, error)
	GetDevices(context.Context, *AuthenticateRequest) (*UserDeviceResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UpdateState(context.Context, *UpdateStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedUserServiceServer) UpdateActivity(context.Context, *UpdateActivityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (UnimplementedUserServiceServer) RemoveActivity(context.Context, *AuthenticateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveActivity not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *AuthenticateRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) Search(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserServiceServer) GenerateRecoveryCodes(context.Context, *AuthenticateRequest) (*RecoveryCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRecoveryCodes not implemented")
}
func (UnimplementedUserServiceServer) EnableTwoFactorAuth(context.Context, *TwoFactorAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTwoFactorAuth not implemented")
}
func (UnimplementedUserServiceServer) DisableTwoFactorAuth(context.Context, *TwoFactorAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTwoFactorAuth not implemented")
}
func (UnimplementedUserServiceServer) GetFriend(context.Context, *FriendRequest) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriend not implemented")
}
func (UnimplementedUserServiceServer) GetPendingFriendRequests(context.Context, *AuthenticateRequest) (*PendingFriendRequests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingFriendRequests not implemented")
}
func (UnimplementedUserServiceServer) GetFriendRequest(context.Context, *FriendRequest) (*Friend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) SendFriendRequest(context.Context, *FriendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) AcceptFriendRequest(context.Context, *FriendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) GetFriends(context.Context, *AuthenticateRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedUserServiceServer) GetOnlineFriends(context.Context, *AuthenticateRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineFriends not implemented")
}
func (UnimplementedUserServiceServer) GetConnection(context.Context, *ConnectionRequest) (*ConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedUserServiceServer) GetConnections(context.Context, *AuthenticateRequest) (*ConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedUserServiceServer) UpdateConnection(context.Context, *ConnectionRequest) (*ConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedUserServiceServer) GetNotifications(context.Context, *AuthenticateRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedUserServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedUserServiceServer) ReadAllNotifications(context.Context, *AuthenticateRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllNotifications not implemented")
}
func (UnimplementedUserServiceServer) CreateDevice(context.Context, *CreateUserDevice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedUserServiceServer) GetDevices(context.Context, *AuthenticateRequest) (*UserDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateActivity(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/RemoveActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveActivity(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Search(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateRecoveryCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateRecoveryCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GenerateRecoveryCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateRecoveryCodes(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EnableTwoFactorAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFactorAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EnableTwoFactorAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/EnableTwoFactorAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EnableTwoFactorAuth(ctx, req.(*TwoFactorAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DisableTwoFactorAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFactorAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DisableTwoFactorAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/DisableTwoFactorAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DisableTwoFactorAuth(ctx, req.(*TwoFactorAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriend(ctx, req.(*FriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPendingFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPendingFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetPendingFriendRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPendingFriendRequests(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriendRequest(ctx, req.(*FriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/SendFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendFriendRequest(ctx, req.(*FriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcceptFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcceptFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/AcceptFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcceptFriendRequest(ctx, req.(*FriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriends(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOnlineFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOnlineFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetOnlineFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOnlineFriends(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetConnection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetConnections(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateConnection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNotifications(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ReadAllNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadAllNotifications(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateDevice(ctx, req.(*CreateUserDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDevices(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateState",
			Handler:    _UserService_UpdateState_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _UserService_UpdateActivity_Handler,
		},
		{
			MethodName: "RemoveActivity",
			Handler:    _UserService_RemoveActivity_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _UserService_Search_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
		{
			MethodName: "GenerateRecoveryCodes",
			Handler:    _UserService_GenerateRecoveryCodes_Handler,
		},
		{
			MethodName: "EnableTwoFactorAuth",
			Handler:    _UserService_EnableTwoFactorAuth_Handler,
		},
		{
			MethodName: "DisableTwoFactorAuth",
			Handler:    _UserService_DisableTwoFactorAuth_Handler,
		},
		{
			MethodName: "GetFriend",
			Handler:    _UserService_GetFriend_Handler,
		},
		{
			MethodName: "GetPendingFriendRequests",
			Handler:    _UserService_GetPendingFriendRequests_Handler,
		},
		{
			MethodName: "GetFriendRequest",
			Handler:    _UserService_GetFriendRequest_Handler,
		},
		{
			MethodName: "SendFriendRequest",
			Handler:    _UserService_SendFriendRequest_Handler,
		},
		{
			MethodName: "AcceptFriendRequest",
			Handler:    _UserService_AcceptFriendRequest_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _UserService_GetFriends_Handler,
		},
		{
			MethodName: "GetOnlineFriends",
			Handler:    _UserService_GetOnlineFriends_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _UserService_GetConnection_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _UserService_GetConnections_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _UserService_UpdateConnection_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _UserService_GetNotifications_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _UserService_CreateNotification_Handler,
		},
		{
			MethodName: "ReadAllNotifications",
			Handler:    _UserService_ReadAllNotifications_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _UserService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _UserService_GetDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.user.proto",
}
