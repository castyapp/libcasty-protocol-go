// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TheaterServiceClient is the client API for TheaterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheaterServiceClient interface {
	Invite(ctx context.Context, in *InviteFriendsTheaterRequest, opts ...grpc.CallOption) (*Response, error)
	GetFollowedTheaters(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FollowedTheatersResponse, error)
	Follow(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error)
	Unfollow(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error)
	GetTheater(ctx context.Context, in *GetTheaterRequest, opts ...grpc.CallOption) (*UserTheaterResponse, error)
	UpdateTheater(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error)
	AddSubtitles(ctx context.Context, in *AddSubtitlesRequest, opts ...grpc.CallOption) (*SubtitlesResponse, error)
	RemoveSubtitle(ctx context.Context, in *RemoveSubtitleRequest, opts ...grpc.CallOption) (*Response, error)
	GetSubtitles(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterSubtitlesResponse, error)
	GetMediaSources(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error)
	GetMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error)
	SelectMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error)
	RemoveMediaSource(ctx context.Context, in *MediaSourceRemoveRequest, opts ...grpc.CallOption) (*Response, error)
	AddMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error)
}

type theaterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTheaterServiceClient(cc grpc.ClientConnInterface) TheaterServiceClient {
	return &theaterServiceClient{cc}
}

func (c *theaterServiceClient) Invite(ctx context.Context, in *InviteFriendsTheaterRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) GetFollowedTheaters(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*FollowedTheatersResponse, error) {
	out := new(FollowedTheatersResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/GetFollowedTheaters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) Follow(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) Unfollow(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) GetTheater(ctx context.Context, in *GetTheaterRequest, opts ...grpc.CallOption) (*UserTheaterResponse, error) {
	out := new(UserTheaterResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/GetTheater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) UpdateTheater(ctx context.Context, in *TheaterAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/UpdateTheater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) AddSubtitles(ctx context.Context, in *AddSubtitlesRequest, opts ...grpc.CallOption) (*SubtitlesResponse, error) {
	out := new(SubtitlesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/AddSubtitles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) RemoveSubtitle(ctx context.Context, in *RemoveSubtitleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/RemoveSubtitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) GetSubtitles(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterSubtitlesResponse, error) {
	out := new(TheaterSubtitlesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/GetSubtitles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) GetMediaSources(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error) {
	out := new(TheaterMediaSourcesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/GetMediaSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) GetMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error) {
	out := new(TheaterMediaSourcesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/GetMediaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) SelectMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error) {
	out := new(TheaterMediaSourcesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/SelectMediaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) RemoveMediaSource(ctx context.Context, in *MediaSourceRemoveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/RemoveMediaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterServiceClient) AddMediaSource(ctx context.Context, in *MediaSourceAuthRequest, opts ...grpc.CallOption) (*TheaterMediaSourcesResponse, error) {
	out := new(TheaterMediaSourcesResponse)
	err := c.cc.Invoke(ctx, "/proto.TheaterService/AddMediaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheaterServiceServer is the server API for TheaterService service.
// All implementations must embed UnimplementedTheaterServiceServer
// for forward compatibility
type TheaterServiceServer interface {
	Invite(context.Context, *InviteFriendsTheaterRequest) (*Response, error)
	GetFollowedTheaters(context.Context, *AuthenticateRequest) (*FollowedTheatersResponse, error)
	Follow(context.Context, *TheaterAuthRequest) (*Response, error)
	Unfollow(context.Context, *TheaterAuthRequest) (*Response, error)
	GetTheater(context.Context, *GetTheaterRequest) (*UserTheaterResponse, error)
	UpdateTheater(context.Context, *TheaterAuthRequest) (*Response, error)
	AddSubtitles(context.Context, *AddSubtitlesRequest) (*SubtitlesResponse, error)
	RemoveSubtitle(context.Context, *RemoveSubtitleRequest) (*Response, error)
	GetSubtitles(context.Context, *MediaSourceAuthRequest) (*TheaterSubtitlesResponse, error)
	GetMediaSources(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error)
	GetMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error)
	SelectMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error)
	RemoveMediaSource(context.Context, *MediaSourceRemoveRequest) (*Response, error)
	AddMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error)
	mustEmbedUnimplementedTheaterServiceServer()
}

// UnimplementedTheaterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTheaterServiceServer struct {
}

func (UnimplementedTheaterServiceServer) Invite(context.Context, *InviteFriendsTheaterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedTheaterServiceServer) GetFollowedTheaters(context.Context, *AuthenticateRequest) (*FollowedTheatersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedTheaters not implemented")
}
func (UnimplementedTheaterServiceServer) Follow(context.Context, *TheaterAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedTheaterServiceServer) Unfollow(context.Context, *TheaterAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedTheaterServiceServer) GetTheater(context.Context, *GetTheaterRequest) (*UserTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheater not implemented")
}
func (UnimplementedTheaterServiceServer) UpdateTheater(context.Context, *TheaterAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheater not implemented")
}
func (UnimplementedTheaterServiceServer) AddSubtitles(context.Context, *AddSubtitlesRequest) (*SubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubtitles not implemented")
}
func (UnimplementedTheaterServiceServer) RemoveSubtitle(context.Context, *RemoveSubtitleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubtitle not implemented")
}
func (UnimplementedTheaterServiceServer) GetSubtitles(context.Context, *MediaSourceAuthRequest) (*TheaterSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtitles not implemented")
}
func (UnimplementedTheaterServiceServer) GetMediaSources(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaSources not implemented")
}
func (UnimplementedTheaterServiceServer) GetMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaSource not implemented")
}
func (UnimplementedTheaterServiceServer) SelectMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectMediaSource not implemented")
}
func (UnimplementedTheaterServiceServer) RemoveMediaSource(context.Context, *MediaSourceRemoveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMediaSource not implemented")
}
func (UnimplementedTheaterServiceServer) AddMediaSource(context.Context, *MediaSourceAuthRequest) (*TheaterMediaSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMediaSource not implemented")
}
func (UnimplementedTheaterServiceServer) mustEmbedUnimplementedTheaterServiceServer() {}

// UnsafeTheaterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheaterServiceServer will
// result in compilation errors.
type UnsafeTheaterServiceServer interface {
	mustEmbedUnimplementedTheaterServiceServer()
}

func RegisterTheaterServiceServer(s grpc.ServiceRegistrar, srv TheaterServiceServer) {
	s.RegisterService(&TheaterService_ServiceDesc, srv)
}

func _TheaterService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteFriendsTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).Invite(ctx, req.(*InviteFriendsTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_GetFollowedTheaters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).GetFollowedTheaters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/GetFollowedTheaters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).GetFollowedTheaters(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheaterAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).Follow(ctx, req.(*TheaterAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheaterAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).Unfollow(ctx, req.(*TheaterAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_GetTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).GetTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/GetTheater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).GetTheater(ctx, req.(*GetTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_UpdateTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheaterAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).UpdateTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/UpdateTheater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).UpdateTheater(ctx, req.(*TheaterAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_AddSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).AddSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/AddSubtitles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).AddSubtitles(ctx, req.(*AddSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_RemoveSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).RemoveSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/RemoveSubtitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).RemoveSubtitle(ctx, req.(*RemoveSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_GetSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).GetSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/GetSubtitles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).GetSubtitles(ctx, req.(*MediaSourceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_GetMediaSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).GetMediaSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/GetMediaSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).GetMediaSources(ctx, req.(*MediaSourceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_GetMediaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).GetMediaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/GetMediaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).GetMediaSource(ctx, req.(*MediaSourceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_SelectMediaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).SelectMediaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/SelectMediaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).SelectMediaSource(ctx, req.(*MediaSourceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_RemoveMediaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).RemoveMediaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/RemoveMediaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).RemoveMediaSource(ctx, req.(*MediaSourceRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterService_AddMediaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaSourceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterServiceServer).AddMediaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TheaterService/AddMediaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterServiceServer).AddMediaSource(ctx, req.(*MediaSourceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TheaterService_ServiceDesc is the grpc.ServiceDesc for TheaterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheaterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TheaterService",
	HandlerType: (*TheaterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _TheaterService_Invite_Handler,
		},
		{
			MethodName: "GetFollowedTheaters",
			Handler:    _TheaterService_GetFollowedTheaters_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _TheaterService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _TheaterService_Unfollow_Handler,
		},
		{
			MethodName: "GetTheater",
			Handler:    _TheaterService_GetTheater_Handler,
		},
		{
			MethodName: "UpdateTheater",
			Handler:    _TheaterService_UpdateTheater_Handler,
		},
		{
			MethodName: "AddSubtitles",
			Handler:    _TheaterService_AddSubtitles_Handler,
		},
		{
			MethodName: "RemoveSubtitle",
			Handler:    _TheaterService_RemoveSubtitle_Handler,
		},
		{
			MethodName: "GetSubtitles",
			Handler:    _TheaterService_GetSubtitles_Handler,
		},
		{
			MethodName: "GetMediaSources",
			Handler:    _TheaterService_GetMediaSources_Handler,
		},
		{
			MethodName: "GetMediaSource",
			Handler:    _TheaterService_GetMediaSource_Handler,
		},
		{
			MethodName: "SelectMediaSource",
			Handler:    _TheaterService_SelectMediaSource_Handler,
		},
		{
			MethodName: "RemoveMediaSource",
			Handler:    _TheaterService_RemoveMediaSource_Handler,
		},
		{
			MethodName: "AddMediaSource",
			Handler:    _TheaterService_AddMediaSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.theater.proto",
}
